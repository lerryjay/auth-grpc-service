syntax = "proto3";

package auth;
option go_package = "pkg/pb";

import "google/protobuf/empty.proto";
import "pkg/pb/model/user.model.proto";



// Generated according to https://cloud.google.com/apis/design/standard_methods
service AuthService {

  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {}

  rpc SocialLogin(SocialLoginRequest) returns (LoginUserResponse) {}

  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty) {}

  rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse) {}

  rpc ResetPassword(UpdatePasswordRequest) returns (google.protobuf.Empty) {}

  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) { }
  
  rpc VerifyOTP(VerifyOTPRequest) returns (google.protobuf.Empty) { }
  
  rpc HasPermission(HasPermissionRequest) returns (google.protobuf.Empty) { }
  
  rpc ListUserPermissions(ListUserPermissionRequest) returns (ListUserPermissionsResponse) { }
  
  rpc AddUserPermission(UserPermission) returns (UserPermission) { }

  rpc DeleteUserPermission(UserPermission) returns (google.protobuf.Empty) { }

  rpc UpdateUserPermissions(UpdateUserPermissionsRequest) returns (UpdateUserPermissionsResponse) { }

  rpc CheckUserPasswordStatus(CheckUserPasswordStatusRequest) returns (CheckUserPasswordStatusResponse) {}


  //rpc Login(LoginRequest) returns (LoginResponse);

  // rpc CreateServiceRole(CreateServiceRoleRequest) returns (CreateServiceRoleResponse) { }
}


// `
message LoginUserRequest {
  // The Login Id
  string LoginId = 1;
  // The Password
  optional string Password = 2;
}

message SocialLoginRequest {
  string Email = 1;
  string FirstName = 2;
  string LastName = 3;
  string Token = 4;
  string Issuer = 5;
  string Imageurl = 6;
}

message LoginUserResponse {
  // Generic response used by all
  string Token = 1;
  string Message = 2;
  string Error = 3;
}


message ChangePasswordRequest {
  // The field will contain name of the resource requested.
  string Id = 1;
  string Oldpassword = 2;
  string Newpassword = 3;
}

message ForgotPasswordRequest {
  // The field will contain name of the resource requested.
  string LoginId = 1;
}

message ForgotPasswordResponse {
  // The field will contain name of the resource requested.
  string FirstName = 1;
  string LastName = 2;
  string Email = 3;
  string Token = 4;
  string TokenExpiryDate = 5;

}

message UpdatePasswordRequest {
  // Updates an auth account with new password
  string LoginId = 1;
  string Token = 2;
  string Password = 3;
}

message ValidateTokenRequest {
  // Checks auth token is valid
  string Token = 1;
}

message ValidateTokenResponse {
  // Checks auth token is valid
  string Id = 1;
  string Role = 2;
}

message VerifyOTPRequest {
  // Checks auth token is valid
  string LoginId = 1;
  string Token = 2;
}

// message CreateServiceRoleRequest {
//   // Checks an ID has a certain permission
//   string Id = 1;
//   string Title = 3;
//   string ServiceId = 2;
//   repeated string Permssions = 4;
// }

// message CreateServiceRoleResponse {
//   // Checks an ID has a certain permission
//   string Id = 1;
// }


message HasPermissionRequest {
  // Checks an ID has a certain permission
  string Id = 1;
  string Permission = 2;
}

message ListUserPermissionRequest {
  // Checks an ID has a certain permission
  string UserId = 1;
}

message ListUserPermissionsResponse {
  // Checks an ID has a certain permission
  repeated string Permissions = 1;
}

message AdduserPermissionRequest {
  // Checks an ID has a certain permission
  string Id = 1;
  string UserId = 2;
  string Permission = 3;
}

message AdduserPermissionResponse {
  // Checks an ID has a certain permission
  string Id = 1;
}

message UpdateUserPermissionsRequest {
  // Checks an ID has a certain permission
  string Id = 1;
  string UserId = 2;
  repeated string Permissions = 3;
}

message UpdateUserPermissionsResponse {
  // Checks an ID has a certain permission
  repeated string Added = 1;
  repeated string Removed = 2;
}

message CheckUserPasswordStatusResponse {
  bool HasPassword = 1;
  bool Enable2FA = 2;
}

message CheckUserPasswordStatusRequest {
  string Id = 1;
}




// TODO: Set config for permission type possibly in env